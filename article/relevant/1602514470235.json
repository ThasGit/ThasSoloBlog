{"relevantArticles":[{"articleTitle":"JAVA 对象头","articleAbstractText":"对象头结构  偏向锁与 hash 不能共存， 一旦计算过 hash, 对象就不可偏向。 对象头中的 bl:1 代表是否可偏向， 若不可偏向， 则前 56 位可以用来表示 hash 值， 若可偏向， 则前 56 位必不表示 hash 值， 可以用来表示偏向的线程 ID  Object 没有属性， 所以除了对象头就没有其他内容了， 根据 8 字节对齐， 自动填充了 4 字节 Object[]数组会额外使用 4 字节保存长度， 所以数组的最大长度为整形; 后面则是顺序存储的全部元素的指针， 由于开启了指针压缩， 每个都是 4 个字节。  指针压缩 32 位 CPU 的最大寻址空间为 2^32, 如果这些寻址空间指向 bit 位， 那么最大支持的内存为 512M; 但是 CPU 存储数据的时候都是以 8bit 为一组， 也就是 1byte; 把寻址空间指向 byte 组， 就可以让最大支持内存增加到 4G. JVM 指针压缩原理相同。 64 位 JVM 最大寻址空间是 2^64, 寻址空间指向 byte 组， 则最大可支持 2^34G 内存; 但是存储 64 位指针会让内存占用提高。 由于 J....","articleStatus":0,"articlePermalink":"/articles/2020/12/14/1607958194047.html","articleImg1URL":"https://b3logfile.com/file/2020/12/image-c4b49cde.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Java 方法调用的底层实现","articleAbstractText":"Java 方法调用通过字节码指令 invokestatic, invokespecial, invokevirtual, invokeinterface, invokedynamic 来实现方法调用. 非虚方法 非虚方法指能够在运行时直接确定其调用地址的方法, 这些方法在类加载完成之后, 其内存地址都是不会再变化的, 可以直接访问调用. invokestatic: 静态方法调用 invokespecial: 私有实例方法调用, 构造方法或 super 方法, 被 final 修饰的实例方法 虚方法 由于多态的特性, 方法可以被不同的子类覆写, 所以对于同一个方法, 它们的实现不同, 对应的方法的目标地址也是不一样的, 通过查方法表来实现动态调用. invokevirtual: 可被覆写的实例方法, 大部分调用方法都是这种方式. Java 对象的方法表存放在类中(与 C++不相同), 从对象实际类型开始递归向上查找类型的方法表, 第一次执行过后, 以方法位置作为索引编号建立缓存 invokeinterface: 类似invokevirtual, 但比较慢, 因为接口中方法的位置编号是无法....","articleStatus":0,"articlePermalink":"/articles/2021/04/09/1617954923009.html","articleImg1URL":"https://b3logfile.com/bing/20190930.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"记一次线上 JAVA 程序 OOM 事件","articleAbstractText":"依赖三方包:  &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.5.13&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 阿里云SLS提供的SDK --&gt; &lt;dependency&gt; &lt;groupId&gt;com.aliyun.openservices&lt;/groupId&gt; &lt;artifactId&gt;aliyun-log&lt;/artifactId&gt; &lt;version&gt;0.6.56&lt;/version&gt; &lt;/dependency&gt;  代码: public class DefaultServiceClient2 extends DefaultServiceClient { // 问题的主要原因出在这个 DefaultServiceCl....","articleStatus":0,"articlePermalink":"/articles/2021/06/03/1622734827959.html","articleImg1URL":"https://b3logfile.com/file/2021/06/image-2cdfa530.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"JVM对象创建与访问","articleAbstractText":"对象创建   创建过程  检查加载 检查符号引用, 如未解析, 则类加载 分配内存 内存空间初始化 赋初值 对象头设置 初始化   划分内存方式  指针碰撞(内存整理) 空闲列表(标记清理)   并发安全  TLAB(线程本地缓冲) CAS抢占    对象内存布局  对象访问定位  句柄 间接引用堆上的实例(Hotspot使用) 安全, 方便GC 直接引用  对象分配策略  栈上分配  经过逃逸分析, 无法逃逸的对象可能在栈上直接分配 标量替换, 如果无法逃逸的对象只有标量属性赋值和访问操作, 则不创建对象, 直接拆分成栈上标量   TLAB线程本地分配 正常堆上分配  优先Eden区 大对象直接分配在老年代   分配空间担保原则 新生代垃圾进入老年代前的担保  默认: 当老年代可用空间大于新生代总对象大小, 则可分配; 如不满足, 进入担保策略, 老年代可用空间大于历史进入老年代的垃圾平均值, 则可分配, 如果分配失败, 则FullGC; 如不满足, 直接FullGC 关闭HandlePromotionFailure担保: 当老年代可用空间大于新生代总对象大小, 则可分配; 如不满足....","articleStatus":0,"articlePermalink":"/articles/2020/10/12/1602511673553.html","articleImg1URL":"https://b3logfile.com/file/2020/10/image-489be9a3.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"JAVA 内存区域","articleAbstractText":"Java 内存区域包括虚拟机栈， 本地方法栈， 程序计数器， 堆， 方法区。","articleStatus":0,"articlePermalink":"/articles/2020/10/11/1602426963457.html","articleImg1URL":"https://b3logfile.com/file/2020/10/image-b3720164.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}